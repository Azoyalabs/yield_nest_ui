/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import type { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import type { StdFee } from "@cosmjs/amino";
import type { InstantiateMsg, ExecuteMsg, Uint128, AdminExecuteMsg, Timestamp, Uint64, Coin, QueryMsg, Addr, GetAdminResponse, GetBatchMintPositionsResponse, MintPositionRecordWithCollateralRatio, FPDecimal, GetDebtTokensResponse, DebtTokenRecord, MarketRecord, GetMintPositionResponse, GetProtocolSettingsResponse, GetRegisteredMarketsResponse, RegisteredMarketRecord, GetUserMintPositionsResponse, MintPositionRecord, GetUserMintPositionsWithCollateralRatioResponse } from "./LendProtocol.types";
export interface LendProtocolReadOnlyInterface {
  contractAddress: string;
  getAdmin: () => Promise<GetAdminResponse>;
  getUserMintPositions: ({
    userAddress
  }: {
    userAddress: Addr;
  }) => Promise<GetUserMintPositionsResponse>;
  getUserMintPositionsWithCollateralRatio: ({
    userAddress
  }: {
    userAddress: Addr;
  }) => Promise<GetUserMintPositionsWithCollateralRatioResponse>;
  getMintPosition: ({
    positionId
  }: {
    positionId: number;
  }) => Promise<GetMintPositionResponse>;
  getBatchMintPositions: ({
    count,
    startId
  }: {
    count: number;
    startId: number;
  }) => Promise<GetBatchMintPositionsResponse>;
  getDebtTokens: () => Promise<GetDebtTokensResponse>;
  getProtocolSettings: () => Promise<GetProtocolSettingsResponse>;
  getRegisteredMarkets: () => Promise<GetRegisteredMarketsResponse>;
}
export class LendProtocolQueryClient implements LendProtocolReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getAdmin = this.getAdmin.bind(this);
    this.getUserMintPositions = this.getUserMintPositions.bind(this);
    this.getUserMintPositionsWithCollateralRatio = this.getUserMintPositionsWithCollateralRatio.bind(this);
    this.getMintPosition = this.getMintPosition.bind(this);
    this.getBatchMintPositions = this.getBatchMintPositions.bind(this);
    this.getDebtTokens = this.getDebtTokens.bind(this);
    this.getProtocolSettings = this.getProtocolSettings.bind(this);
    this.getRegisteredMarkets = this.getRegisteredMarkets.bind(this);
  }

  getAdmin = async (): Promise<GetAdminResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_admin: {}
    });
  };
  getUserMintPositions = async ({
    userAddress
  }: {
    userAddress: Addr;
  }): Promise<GetUserMintPositionsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_user_mint_positions: {
        user_address: userAddress
      }
    });
  };
  getUserMintPositionsWithCollateralRatio = async ({
    userAddress
  }: {
    userAddress: Addr;
  }): Promise<GetUserMintPositionsWithCollateralRatioResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_user_mint_positions_with_collateral_ratio: {
        user_address: userAddress
      }
    });
  };
  getMintPosition = async ({
    positionId
  }: {
    positionId: number;
  }): Promise<GetMintPositionResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_mint_position: {
        position_id: positionId
      }
    });
  };
  getBatchMintPositions = async ({
    count,
    startId
  }: {
    count: number;
    startId: number;
  }): Promise<GetBatchMintPositionsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_batch_mint_positions: {
        count,
        start_id: startId
      }
    });
  };
  getDebtTokens = async (): Promise<GetDebtTokensResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_debt_tokens: {}
    });
  };
  getProtocolSettings = async (): Promise<GetProtocolSettingsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_protocol_settings: {}
    });
  };
  getRegisteredMarkets = async (): Promise<GetRegisteredMarketsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_registered_markets: {}
    });
  };
}
export interface LendProtocolInterface extends LendProtocolReadOnlyInterface {
  contractAddress: string;
  sender: string;
  mint: ({
    quantity,
    targetDenom
  }: {
    quantity: Uint128;
    targetDenom: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  liquidate: ({
    positionId
  }: {
    positionId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  repay: ({
    positionId
  }: {
    positionId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  admin: (adminExecuteMsg: AdminExecuteMsg, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class LendProtocolClient extends LendProtocolQueryClient implements LendProtocolInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.mint = this.mint.bind(this);
    this.liquidate = this.liquidate.bind(this);
    this.repay = this.repay.bind(this);
    this.admin = this.admin.bind(this);
  }

  mint = async ({
    quantity,
    targetDenom
  }: {
    quantity: Uint128;
    targetDenom: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint: {
        quantity,
        target_denom: targetDenom
      }
    }, fee, memo, _funds);
  };
  liquidate = async ({
    positionId
  }: {
    positionId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      liquidate: {
        position_id: positionId
      }
    }, fee, memo, _funds);
  };
  repay = async ({
    positionId
  }: {
    positionId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      repay: {
        position_id: positionId
      }
    }, fee, memo, _funds);
  };
  admin = async (adminExecuteMsg: AdminExecuteMsg, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      admin: adminExecuteMsg
    }, fee, memo, _funds);
  };
}